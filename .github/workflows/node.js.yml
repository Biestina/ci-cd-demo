# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: My first CICD workflow

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]

# env:
 # verzio: 16.x
 

jobs:
  my_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
        # os: [windows, linux]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
      name: check_out
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        # cache: 'npm'
    - run: npm ci
    - run: npm run test
  my_deploy:
    runs-on: ubuntu-latest
    needs: my_test
    steps:
      - name: Kitelepites
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.DEPLOY_SERVER_IP }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}
          script: |
            mkdir -p /home/ubuntu/deploy/${{ github.run_id }}
            cd /home/ubuntu/deploy/${{ github.run_id }} && git clone https://github.com/Biestina/ci-cd-demo
            cd /home/ubuntu/deploy/${{ github.run_id }}/ci-cd-demo && docker build . -t biestina/ci-cd-demo:${{ github.run_id }}
            docker rm -f $(docker ps -q -f name=myapp|awk '{print $1}')
            docker run -dit --name myapp-${{ github.run_id }} -p 80:3000 biestina/ci-cd-demo:${{ github.run_id }}
            rm -fr /home/ubuntu/deploy/*
            
            
      
